package com.example.demo.Service;

import java.awt.print.Book;
import java.util.List;
import java.util.Optional;

import org.hibernate.ObjectNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.example.demo.Entity.MyOrder;
import com.example.demo.Exceptions.MyOrderNotFoundException;
import com.example.demo.Repository.OrderRepo;

import jakarta.transaction.Transactional;
import lombok.AllArgsConstructor;

@Service
@AllArgsConstructor
public class OrderService {
	
	@Autowired
	private OrderRepo repo;
	
	
	public MyOrder saveMyOrder(MyOrder MyOrder) {
		return repo.save(MyOrder);
	}
	
	
	public List<MyOrder> getAllMyOrders(){
		return repo.findAll();
	}
	
	
	public String deleteMyOrderById(int id) {
		Optional<MyOrder> optionalBook = repo.findById(id);
		if(!optionalBook.isPresent()) {
			throw new ObjectNotFoundException("Object Not Found", optionalBook);
		}
		
		repo.deleteById(id);
		return "MyOrder with id "+id+" is deleted successfully";
	}
	
	
	public MyOrder updateMyOrder(int id, int quantity) {
		Optional<MyOrder> optionalBook = repo.findById(id);
		if(!optionalBook.isPresent()) {
			throw new ObjectNotFoundException("Object Not Found", optionalBook);
		}
		
		MyOrder existingBook = MyOrder.builder()
				.quantity(quantity)
				.side(optionalBook.get().getSide())
				.price(optionalBook.get().getPrice()).build();
		return repo.save(existingBook);
	}

	


	@Transactional
	public ResponseEntity<String> deleteBookById(int id) {
	    Optional<MyOrder> optionalMyOrder = repo.findById(id);
	    if (optionalMyOrder.isPresent()) {
	        MyOrder existingMyOrder = optionalMyOrder.get();
	        try {
	            repo.deleteById(id);
	            return new ResponseEntity<String>("MyOrder deleted successfully!", HttpStatus.OK);
	        } catch (Exception e) {
	            throw new RuntimeException("Failed to delete MyOrder with id " + id, e);
	        }
	    } else {
	        throw new MyOrderNotFoundException("MyOrder with id " + id + " is not found");
	    }  
	}

}
